#!/usr/bin/env python
"""
 The Accumlate node subscribes to a message, sums the data received,
 and logs the result

SUBSCRIBES:
  count (Count) - the count to add to the accumulated total
"""

import rospy
from counter.msg import Count

class Accumulator(object):
    """ Accumulate the total of messages in subscribed nodes  """
    def __init__(self):
        self.count = 0
        rospy.Subscriber("count", Count, self.callback)

    def callback(self, data):
        """ Used as the 'count' callback.  
           
            Args:
               data (Count) - the received count
        """

        self.count += data.count
        rospy.loginfo(rospy.get_name() + " received from " + data.mode + " count %d", self.count)

def main():
    rospy.init_node("accumulate")
    Accumulator()
    rospy.spin()


if __name__ == "__main__":
   try:
      main()
   except rospy.ROSInterruptException:
      pass
