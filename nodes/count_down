#!/usr/bin/env python
"""
Publishes a count that decreases once per second

PUBLISHERS:
   count (Count) ~ Publishes the count
"""

import rospy
from counter.msg import Count
from std_srvs.srv import Empty, EmptyResponse

class CounterTimer(object):
   """ Maintain a count in a timer callback 

       Attributes:
         timer: the timer object
         pub: publisher for the count
         count: the current count
         stopsrv: stop service
    """
   def __init__(self):
     self.pub = rospy.Publisher("count", Count, queue_size = 10)
     self.count = 100
     self.stopped = False
     self.stopsrv = rospy.Service('stop', Empty, self.stop)

     # Timer should be initialized last. It starts in a separate thread
     # So everything should be initialized before the callback can be called
     self.timer = rospy.Timer(rospy.Duration(1), self.callback)

   def callback(self, event):
      if not self.stopped:
         self.pub.publish(Count(mode = rospy.get_name(), count = self.count))
         self.count -= 1

   def stop(self, req):
      self.stopped = not self.stopped
      return EmptyResponse()

def main():
   rospy.init_node('count_down')
   c = CounterTimer()
   rospy.spin()

if __name__ == "__main__":
   try:
      main()
   except rospy.ROSInterruptException:
      pass

         
